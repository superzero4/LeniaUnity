//#pragma kernel CSMain
//#pragma kernel NoiseMain
//#pragma kernel CopyToOutput
//#pragma kernel CopyToFloat

// #region Common
cbuffer ShaderParams
{
    uint ResX;
    uint ResY;
    uint ResZ;
    uint _Radius; // space resolution = kernel radius
    unorm float dt; // time step
    unorm float mu; // growth center
    unorm float sigma; // growth width //Bert chan is 0.01f;
    float4 _Time;
    double kernelNorm;
    int convolDim;
}

inline uint Index(uint3 id)
{
    return id.z + id.y * ResZ + id.x * ResY * ResZ;
}

inline uint diameter()
{
    return 2 * _Radius + 1;
}

inline uint KernelIndex(int3 id)
{
    uint diam = diameter();
    return (id.z + _Radius) + (id.y + _Radius) * diam + (id.x + _Radius) * diam * diam;
}

// #endregion
// #region Input

inline unorm float quadGrowth(unorm float n, unorm float m, unorm float s)
{
    //  np.maximum(0, 1 - (n-m)**2 / (9 * s**2) )**4
    return pow(max(0, 1 - pow(n - m, 2) / (9 * s * s)), 4);
}

inline uint boundMod(int val, uint bound)
{
    uint sum = val + bound; //Positive as long as val isn't < -bounde
    return (sum % bound);
}

double Loop(uint3 id, uint dim)
{
    double sum = 0.0f;
    double total = 0.0f;
    int rad = (int)_Radius;
    bool3 target = bool3(dim == 0, dim == 1, dim == 2);
    UNITY_LOOP for (int index = -rad; index <= rad; index++)
    {
        //z is smallest step, when we increase z by should only check the next memory location
        int3 offset = int3(index * target.x, index * target.y, index * target.z);
        uint idX = boundMod(int(id.x) + offset.x, ResX);
        uint idY = boundMod(int(id.y) + offset.y, ResY);
        uint idZ = boundMod(int(id.z) + offset.z, ResZ);
        //bool inLocal = groupID == txyz / THREADS;
        //float neighbourValue = _Input[Index(txyz)];
        //float neighbourValue = inLocal
        //                         ? sharedData[txyz.x%THREADS][txyz.y%THREADS][txyz.z%THREADS]
        //                         : _Input[Index(txyz)];
        double neighbourValue = _MidPut[Index(uint3(idX, idY, idZ))];
        //float neighbourValue = .5f;//_Input[Index(txyz)];
        //float weight = bell(r, rho, omega);
        // Kernel index is centered, it means 0 is the center of the kernel which is what we want actually, the center line, row or collumn
        double weight = _kernel[KernelIndex(offset)];
        //Used in original python lenia for 3D instead of bell for kenel
        sum += neighbourValue * weight;
        total += weight;
    }
    return sum / total;
}

[numthreads(THREADS_NUMBER,THREADS_NUMBER,THREADS_NUMBER)]
void ConvolMain(uint3 id : SV_DispatchThreadID) //kernel 2
{
    _Output[Index(id)] = Loop(id, convolDim);
}


[numthreads(THREADS_NUMBER,THREADS_NUMBER,THREADS_NUMBER)]
void CopyToFloat(uint3 id : SV_DispatchThreadID) //kernel 4
{
    uint index = Index(id);
    _OutputF[index] = _Input[index];
}

[numthreads(THREADS_NUMBER,THREADS_NUMBER,THREADS_NUMBER)]
void CopyToOutput(uint3 id : SV_DispatchThreadID) //kernel 3
{
    uint index = Index(id);
    _Output[index] = _Input[index];
}
[numthreads(THREADS_NUMBER,THREADS_NUMBER,THREADS_NUMBER)]
void CSMain(uint3 id : SV_DispatchThreadID) // Kernel 0
{
    //Last val
    double val = _Input[Index(id)];

    double avg = _MidPut[Index(id)]; //the cumulated result of all convolutions
    unorm float growth = quadGrowth(avg, mu, sigma) * 2.0 - 1.0;
    double color = clamp(val + dt * growth, 0.0, 1.0);
    color = color;
    //const uint diam = diameter();
    //Debug Kernel :
    //color = (id.x < diam && id.y < diam && id.z < diam)
    //            ? _kernel[KernelIndex(id-((int3)_Radius))]
    //            : 0.f;
    //Debug Kernel center lines (the one we use for 3X1D convolution)
    //color = (id.x < diam && id.y < diam && id.z < diam && (id.x == _Radius || id.y == _Radius || id.z == _Radius))
    //            ? _kernel[KernelIndex(id - ((int3)_Radius))]
    //            : 0.f;
    //color = (id.x == (ResX / 2) || id.y == (ResY/2) || id.z == (ResZ / 2))
    //            ? id.x
    //            : 0.f;
    _Output[Index(id)] = color;

    //color = quadGrowth(avg, mu, sigma);
    //Debugging the quad kernel function "range"
    //color = quad(sqrt(float(center.x * center.x + center.y * center.y + center.z * center.z)) / _Radius);
    //avg =  .10f;
    //Debugging index of the buffer : float displayedValue = float(Index(id))/float(ResX*ResY*2);
    //_Output[id.xy] = float4(uv.x, uv.y, 0, 1);

    /*
    if (_Time.y < 10.f || mouse)
    {
        c = 0.013f + noise(float2(id.x, id.y));
    }

    
    if (mouse)
    {
        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);
        if (d <= R/iResolution.x) c = 0.02 + noise(fragCoord/R + mod(_Time.y,1.)*100.);
    }*/
}

// #endregion

// #region Noise
//Kernel 1

// Hash / noise functions
float2 hash(float2 p)
{
    p = float2(dot(p, float2(127.1f, 311.7f)), dot(p, float2(269.5f, 183.3f)));
    return -1.0f + 2.0f * frac(sin(p) * 43758.5453123f);
}

float noise(float2 p)
{
    const float k1 = 0.366025404f; // (sqrt(3)-1)/2;
    const float k2 = 0.211324865f; // (3-sqrt(3))/6;

    float2 i = floor(p + (p.x + p.y) * k1);
    float2 a = p - i + (i.x + i.y) * k2;
    float m = step(a.y, a.x);
    const float2 o = float2(m, 1.0f - m);
    const float2 b = a - o + k2;
    const float2 c = a - 1.0f + 2.0f * k2;
    const float3 h = max(0.5f - float3(dot(a, a), dot(b, b), dot(c, c)), 0.0f);
    const float3 n = h * h * h * h * float3(dot(a, hash(i + 0.0f)), dot(b, hash(i + o)), dot(c, hash(i + 1.0f)));
    return dot(n, 70.0f);
}

[numthreads(8,8,8)]
void NoiseMain(uint3 id : SV_DispatchThreadID)
{
    float x = float(id.x) / _Radius;
    float y = float(id.y) / _Radius;
    float z = (float(id.z) / ResZ) * 100;
    _Output[Index(id)] = 0.073f + noise(float2(x + z, y + z));
}

// #endregion
